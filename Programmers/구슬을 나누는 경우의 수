머쓱이는 구슬을 친구들에게 나누어주려고 합니다. 
구슬은 모두 다르게 생겼습니다.
머쓱이가 갖고 있는 구슬의 개수 balls와 친구들에게 나누어 줄 구슬 개수 share이 매개변수로 주어질 때, 
balls개의 구슬 중 share개의 구슬을 고르는 가능한 모든 경우의 수를 return 하는 solution 함수를 완성해주세요.
서로 다른 n개 중 m개를 뽑는 경우의 수 공식은 다음과 같습니다. 
n! / (n-m)! * m!

class Solution {
    public int solution(int balls, int share) {
        int answer = 0;
        int nF = 1;
        int nmF = 1;
        int mF = 1;
        for(int i = 1; i<=balls; i++){
            nF *=i;
        }
        for(int i = 1; i<=balls-share; i++){
            nmF *=i;
        }
        for(int i = 1; i<=share; i++){
            mF *=i;
        }
        answer = nF/(nmF*mF);
        return answer;
    }
}

==bigint 랑 factorial 메소드 사용
import java.math.BigInteger;

class Solution {
    public BigInteger solution(int balls, int share) {
        BigInteger bigBalls = BigInteger.valueOf(balls);
        BigInteger bigShare = BigInteger.valueOf(share);
        
    	return factorial(bigBalls).divide(factorial(bigBalls.subtract(bigShare)).multiply(factorial(bigShare)));
    }
    
    public static BigInteger factorial(BigInteger n) {
        if(n.intValue() <= 1)
        {
        	return BigInteger.ONE;
        }
    
        return n.multiply(factorial(n.subtract(BigInteger.ONE)));
    }
}

==
class Solution {
    public long solution(int balls, int share) {
        share = Math.min(balls - share, share);

        if (share == 0)
            return 1;

        long result = solution(balls - 1, share - 1);
        result *= balls;
        result /= share;

        return result;
    }


}
